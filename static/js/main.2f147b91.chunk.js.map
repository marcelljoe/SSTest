{"version":3,"sources":["App.js","Redux/_actions/SearchActions.js","serviceWorker.js","Redux/_reducers/SearchReducers.js","Redux/_redux/store.js","index.js"],"names":["App","onChangeSearch","e","setState","searchByUser","target","value","onSubmitSearch","search","state","props","dispatch","type","payload","Axios","get","getRepos","Container","Form","onSubmit","this","Field","align","Input","size","placeholder","onChange","Button","color","message","Header","as","List","divided","relaxed","repoNames","map","data","i","Item","key","Icon","name","verticalAlign","Content","Description","full_name","Component","connect","SearchReducers","Boolean","window","location","hostname","match","initState","isError","action","middlewares","logger","promiseMiddleware","reducers","combineReducers","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAMMA,E,YACJ,aAAc,IAAD,8BACX,+CAOFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,aAAcF,EAAEG,OAAOC,SAT3B,EAYbC,eAAiB,SAACL,GAChB,IAAMM,EAAS,EAAKC,MAAML,aAC1B,EAAKM,MAAMC,SCnBS,SAACH,GACrB,MAAO,CACLI,KAAM,YACNC,QAASC,IAAMC,IAAN,uCAA0CP,EAA1C,YDgBSQ,CAASR,KAZ3B,EAAKC,MAAQ,CACXL,aAAc,IAHP,E,sEAkBb,OACE,kBAACa,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,SAAUC,KAAKb,gBACnB,kBAACW,EAAA,EAAKG,MAAN,CAAYC,MAAM,UAChB,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLZ,KAAK,OACLa,YAAY,cACZnB,MAAOc,KAAKX,MAAML,aAClBsB,SAAUN,KAAKnB,kBAGnB,kBAACiB,EAAA,EAAKG,MAAN,CAAYC,MAAM,UAChB,kBAACK,EAAA,EAAD,CAAQf,KAAK,SAASgB,MAAM,QAAQJ,KAAK,SAAzC,UAKHJ,KAAKV,MAAMmB,QACV,kBAACC,EAAA,EAAD,CAAQC,GAAG,MAAMX,KAAKV,MAAMmB,SAE5B,kBAACG,EAAA,EAAD,CAAMC,SAAO,EAACC,SAAO,GAClBd,KAAKV,MAAMyB,UAAUC,KAAI,SAACC,EAAMC,GAAP,OACxB,kBAACN,EAAA,EAAKO,KAAN,CAAWC,IAAKF,GACd,kBAACN,EAAA,EAAKS,KAAN,CAAWC,KAAK,SAASlB,KAAK,QAAQmB,cAAc,WACpD,kBAACX,EAAA,EAAKY,QAAN,KACE,kBAACZ,EAAA,EAAKF,OAAN,CAAaC,GAAG,KAAKM,EAAKK,MAC1B,kBAACV,EAAA,EAAKa,YAAN,CAAkBd,GAAG,KAAKM,EAAKS,sB,GA9C7BC,aA6DHC,eALS,SAAAvC,GAAK,MAAK,CAChC0B,UAAW1B,EAAMwC,eAAed,UAChCN,QAASpB,EAAMwC,eAAepB,WAGjBmB,CAAyBhD,GEvDpBkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BClBAC,EAAY,CACdpB,UAAW,GACXqB,SAAS,EACT3B,QAAQ,IAuBGoB,EApBQ,WAAgC,IAA/BxC,EAA8B,uDAAtB8C,EAAWE,EAAW,uCAClD,OAAQA,EAAO7C,MACX,IAAK,sBACD,sBACOH,EADP,CAEI+C,SAAS,EACTrB,UAAWsB,EAAO5C,QAAQwB,KAC1BR,QAAS,KAEjB,IAAK,qBACD,sBACOpB,EADP,CAEI+C,SAAS,EACT3B,QAAS,mBAEb,QACI,OAAOpB,I,2BCjBjBiD,EAAc,CAACC,IAAQC,KAEvBC,EAAWC,YAAgB,CAC/Bb,mBAKac,EAFDC,YAAYH,EAAUI,IAAe,WAAf,EAAmBP,ICAvDQ,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,OAEFK,SAASC,eAAe,SHoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2f147b91.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Header, List, Container, Form, Input, Button} from 'semantic-ui-react';\nimport Axios from 'axios';\nimport {getRepos} from './Redux/_actions/SearchActions';\nimport {connect} from 'react-redux';\n\nclass App extends Component {\n  constructor(){\n    super();\n      this.state = {\n        searchByUser: '',\n        // repoNames: []\n      }\n  }\n\n  onChangeSearch = (e) => {\n    this.setState({searchByUser: e.target.value})\n  }\n\n  onSubmitSearch = (e) => {\n    const search = this.state.searchByUser;\n    this.props.dispatch(getRepos(search));\n  }\n\nrender(){\n  return (\n    <Container>\n      <Form onSubmit={this.onSubmitSearch}>\n        <Form.Field align=\"center\">\n          <Input\n            size=\"small\"\n            type=\"text\"\n            placeholder=\"Search User\"\n            value={this.state.searchByUser}\n            onChange={this.onChangeSearch}\n          />\n        </Form.Field>\n        <Form.Field align=\"center\">\n          <Button type=\"submit\" color=\"black\" size=\"small\">\n            Find\n          </Button>\n        </Form.Field>\n      </Form>\n      {this.props.message ? (\n        <Header as=\"h2\">{this.props.message}</Header>\n      ) : (\n        <List divided relaxed>\n          {this.props.repoNames.map((data, i) => (\n            <List.Item key={i}>\n              <List.Icon name=\"github\" size=\"large\" verticalAlign=\"middle\" />\n              <List.Content>\n                <List.Header as=\"a\">{data.name}</List.Header>\n                <List.Description as=\"a\">{data.full_name}</List.Description>\n              </List.Content>\n            </List.Item>\n          ))}\n        </List>\n      )}\n    </Container>\n  );\n  }\n}\nconst mapStateToProps = state => ({\n  repoNames: state.SearchReducers.repoNames,\n  message: state.SearchReducers.message\n});\n\nexport default connect(mapStateToProps)(App);\n","import Axios from 'axios';\r\n\r\nexport const getRepos = (search) => {\r\n    return {\r\n      type: \"GET_REPOS\",\r\n      payload: Axios.get(`https://api.github.com/users/${search}/repos`)\r\n    };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n    repoNames: [],\r\n    isError: false,\r\n    message:''\r\n};\r\n\r\nconst SearchReducers = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case \"GET_REPOS_FULFILLED\":\r\n            return{\r\n                ...state,\r\n                isError: false,\r\n                repoNames: action.payload.data,\r\n                message: ''\r\n            };\r\n        case \"GET_REPOS_REJECTED\":\r\n            return{\r\n                ...state,\r\n                isError: true,\r\n                message: \"User not found\"\r\n            };\r\n            default:\r\n                return state;\r\n    }\r\n};\r\n\r\nexport default SearchReducers;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport SearchReducers from \"../_reducers/SearchReducers\";\r\nimport logger from \"redux-logger\";\r\nimport promiseMiddleware from \"redux-promise-middleware\";\r\n\r\nconst middlewares = [logger, promiseMiddleware];\r\n\r\nconst reducers = combineReducers({\r\n  SearchReducers\r\n});\r\n\r\nconst store = createStore(reducers, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./Redux/_redux/store\";\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}